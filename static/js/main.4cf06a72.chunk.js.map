{"version":3,"sources":["components/NavBar.js","components/Home.js","apiConfig.js","components/MainCast.js","components/CharacterBio.js","components/Episode.js","components/EpisodeListing.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","to","Home","apiUrls","apiUrl","window","location","hostname","MainCast","state","characters","axios","get","then","res","setState","data","catch","console","error","characterList","this","map","character","key","id","name","Component","CharacterPage","status","img","episodes","props","match","params","bro","characterResponse","singleCharacter","episodeIdsString","episode","substring","lastIndexOf","listOfEpisodeValues","join","episodeResponse","image","epList","ep","epCount","length","src","alt","Episode","airdate","sis","singleEpisode","characterIdsString","listOfCharIdsValues","air_date","charList","EpisodeListing","allEpisodes","all","episodeResponsePageOne","episodeResponsePageTwo","episodePageOne","results","episodePageTwo","concat","episodeList","App","className","exact","path","component","CharacterBio","Boolean","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4cf06a72.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Navbar = () => {\n    return (\n        <nav>\n            <div>\n                <p>Rick and Morty</p>\n                <ul>\n                    <li><Link to='/'>Home</Link></li>\n                    {/* <li><Link to='/about'>About</Link></li> */}\n                    <li><Link to='/maincast'>Main Characters</Link></li>\n                    <li><Link to='/episodelisting'>List of all Episodes</Link></li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\n\nconst Home = () => {\n    return (\n        <div>\n            <h4>Home</h4>\n            <p>\n               content\n            </p>\n        </div>\n    \n    )\n}\n\nexport default Home\n","let apiUrl\nconst apiUrls = {\n  production: 'http://localhost:3000/',\n  development: 'https://rickandmortyapi.com/api/'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nexport default apiUrl\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\n\nimport apiUrl from '../apiConfig'\n\nclass MainCast extends Component {\n    constructor() {\n        super()\n        this.state = {\n            characters:[]\n        }\n    }\n\n    componentDidMount() {\n        axios.get(`${apiUrl}/character/1,2,3,4,5`)\n        // .then(res => console.log(res.data))\n        .then(res => \n            this.setState ({\n            characters: res.data\n        }))\n        .catch(console.error)\n    }\n\n    render() {\n        const { characters } = this.state\n        const characterList = characters.map(character => (\n            <div key= {character.id}>\n                <Link to={`/characterbio/${character.id}`}>{character.name}</Link>\n            </div>\n        ))\n\n        return (\n            <div>\n                <h4>The Family </h4>\n                <div>\n                    {characterList}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainCast;\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nimport apiUrl from '../apiConfig'\n\nclass CharacterPage extends Component {\n    constructor() {\n        super()\n        this.state = {\n            name:\"\",\n            status:\"\",\n            img:\"\",\n            episodes: []\n        }\n    }\n\n    async componentDidMount() {\n        const characterResponse = await axios.get(`${apiUrl}character/${this.props.match.params.bro}`)\n        const singleCharacter = characterResponse.data\n        const episodeIdsString = singleCharacter.episode.map(episode => episode.substring(episode.lastIndexOf('/') + 1))\n        // console.log(episodeIdsString, 'string')\n        const listOfEpisodeValues = episodeIdsString.join()\n        // console.log(listOfEpisodeValues)\n        const episodeResponse = await axios.get(`${apiUrl}/episode/${listOfEpisodeValues}`)\n        const episodes = episodeResponse.data\n        // console.log(episodes, \"episode\")\n        this.setState ({\n            name: singleCharacter.name,\n            status: singleCharacter.status,\n            img: singleCharacter.image,\n            episodes\n        })\n    }\n\n    render() {\n        const { name, status, img, episodes} = this.state\n\n        const epList = episodes.map(ep => (\n            <div key={ep.id}>\n                    <Link to={`/episode/${ep.id}`}>\n                        <li>{ep.name}</li>\n                    </Link>\n            </div>\n        ))\n\n        const epCount = episodes.length\n\n        return (\n            <div>\n                <div>\n                    <img src={img} alt=\"pic of character\"></img>\n                </div>\n                    <div>\n                        Name: {name}\n                    </div>\n                    <div>\n                        Status: {status}\n                    </div>\n                    <div>\n                        Number of Episodes Appeared in: {epCount}\n                    </div>\n                <hr />\n                    <div>\n                        List of Episode Appearance:\n                        <ul>\n                            {epList}\n                        </ul>\n                    </div>\n            </div>\n        );\n    }\n}\n\nexport default CharacterPage;\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nimport apiUrl from '../apiConfig'\n\nclass Episode extends Component {\n    constructor() {\n        super()\n        this.state = {\n            name:\"\",\n            airdate:\"\",\n            episode:\"\",\n            characters:[]\n        }\n    }\n\n    async componentDidMount() {\n        // same as 'res'\n        const episodeResponse = await axios.get(`${apiUrl}episode/${this.props.match.params.sis}`)\n        // console.log(episodeResponse)\n        const singleEpisode = episodeResponse.data\n        const characterIdsString = singleEpisode.characters.map(character => character.substring(character.lastIndexOf('/') + 1))\n        // console.log(characterIdsString)\n        const listOfCharIdsValues = characterIdsString.join(',')\n        // console.log(listOfCharIdsValues)\n        // same as 'res'\n        const characterResponse = await axios.get(`${apiUrl}/character/${listOfCharIdsValues}`)\n        const characters = characterResponse.data\n        // console.log(characters, \" chars\")\n        this.setState ({\n            name: singleEpisode.name,\n            airdate: singleEpisode.air_date,\n            episode: singleEpisode.episode,\n            characters\n        })\n    }\n\n    render() {\n        const { name, airdate, episode, characters } = this.state\n\n        const charList = characters.map(character => (\n            <div key={character.id}>\n                    <Link to={`/characterbio/${character.id}`}>\n                        <li>\n                            {/* <img src={character.image} alt={character.name}/>{character.name} */}\n                            {character.name}\n                        </li>\n                    </Link>\n            </div>\n        ))\n\n        return (\n            <div>\n                Episode name : {name}\n                <br />\n                    {episode}\n                <br />\n                    Air Date: {airdate}\n                <br />\n                <ul>\n                    Character Appearances: {charList}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Episode\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nimport apiUrl from './../apiConfig'\n\nclass EpisodeListing extends Component {\n    constructor(){\n        super()\n        this.state = {\n            allEpisodes:[]\n        }\n    }\n\n   async componentDidMount() {\n        const [episodeResponsePageOne, episodeResponsePageTwo] = await axios.all([ \n            axios.get(`${apiUrl}/episode/?page=1`),\n            axios.get(`${apiUrl}/episode/?page=2`)\n        ])\n        // console.log(episodeResponsePageOne.data.results, episodeResponsePageTwo.data.results)\n        const episodePageOne = episodeResponsePageOne.data.results\n        const episodePageTwo = episodeResponsePageTwo.data.results\n        const allEpisodes = episodePageOne.concat(episodePageTwo)\n        // console.log(allEpisodes)\n        this.setState ({\n            allEpisodes\n        })\n    }\n\n    render(){\n        const { allEpisodes } = this.state\n\n        const episodeList = allEpisodes.map(episode => (\n            <div key={episode.id}>\n                <Link to={`/episode/${episode.id}`}>\n                    {episode.name}\n                </Link>\n            </div>\n        ))\n\n        return(\n            <div>\n                {episodeList}\n            </div>\n    )}\n}\n\nexport default EpisodeListing\n","import React, { Component } from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport Navbar from './NavBar'\nimport Home from './Home'\nimport MainCast from './MainCast'\n// import About from './About'\nimport CharacterBio from './CharacterBio'\nimport Episode from './Episode'\nimport EpisodeListing from './EpisodeListing'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <hr />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/maincast\" component={MainCast} />\n          {/* <Route path=\"/about\" component={About} /> */}\n          <Route path=\"/characterbio/:bro\" component={CharacterBio} />\n          <Route path=\"/episodelisting\" component={EpisodeListing} />\n          <Route path=\"/episode/:sis\"  component={Episode} />\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}